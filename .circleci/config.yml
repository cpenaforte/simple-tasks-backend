# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1
orbs:
  node: circleci/node@5.1.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build_and_test:
      # Primary container image where all commands run
    docker:
    # Service container image
      - image: cimg/node:18.18
        environment:
          PORT: 3000
          DB_PORT: 5432
          NODE_ENV: test
          HOSTNAME: localhost
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: 14253678
          POSTGRES_DB: st_db
          SALT_ROUNDS: 10
          TOKEN_KEY: simpleTasks
          MAX_QUEUE: 50
      - image: cimg/postgres:15.4
        environment:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: 14253678
          POSTGRES_DB: st_db

    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout             
      - run: node --version
      - node/install-packages:
          pkg-manager: yarn
      # Wait for Postgres connection to open.
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          command: yarn test
          name: Run unit tests
      - run:
          command: yarn build
          name: Build for production
      - run:
          command: yarn start:test
          name: Start server
          background: true
      - run:
          command: sleep 15 && curl -I localhost:3000
          name: Verify server is running
      
  push_image:
    docker:
    # Service container image
      - image: cimg/node:18.18
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: docker login --username cpenaforte --password $DOCKERHUB_PASSWORD
          name: Login to DockerHub
      - run:
          command: docker build -t st-back-test . -f ./docker/Dockerfile.dev.test && docker tag st-back-test cpenaforte/st-back-test
          name: Build Docker image
      - run:
          command: docker push cpenaforte/st-back-test
          name: Push Docker image

  deploy:
    machine:
      image: ubuntu-2004:current
    resource_class: medium
    steps:
      - run:
          name: Deploy API to Render
          command: |
            response=$(curl -s -w "%{http_code}" -o response.txt $DEPLOY_URI)
            response_code=${response:(-3)}
            if [ $response_code -eq 200 ]; then
              echo "Deployment successful!"
              cat response.txt  # Print the response body
            else
              echo "Deployment failed with response code: $response_code"
              cat response.txt  # Print the response body
              exit 1
            fi

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  build_and_test_app:
    jobs:
      - build_and_test
      - push_image:
          requires:
           - build_and_test
          filters:
            branches:
                only: master
      - deploy:
          requires:
           - push_image
          filters:
            branches:
                only: master